;(require '[cljs.nodejs]
;	 '[clojure.string :as str])

(def PS1 "\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ")

(defalias ls "ls --color")
(defalias gits "git status")
(defalias gitc "git commit -v")
(defalias gita "git add")
(defalias gitd "git diff --color")
(defalias gitm "git checkout master && git pull")

(defn- git-stat []
  (let [{:keys [code stdout]} (sh-value git status)]
    (when (= 0 code)
      (let [[_ branch] (re-find #"On branch (.*?)\s" stdout)
            stg (re-find #"Changes not staged " stdout)
            [_ ahead] (re-find #"ahead.*(\d+) commits" stdout)
            [_ behind] (re-find #"behind.*(\d+) commits" stdout)]
        (cond-> (str "\033[01;32m" branch)
                stg (str "\033[;34m*")
                ahead (str "\033[;32m +" ahead)
                behind (str "\033[;31m -" behind))))))

(defn closh-prompt []
  (let [name (str (sh-str whoami) "@" (sh-str hostname))
        path (str/replace-first (sh-str pwd) (getenv "HOME") "~")]
    (if-let [git (git-stat)]
      (str git " \033[01;34m" path "\033[00m " (.getName *ns*) "=> ")
      (str "\033[01;32m" name " \033[01;34m" path "\033[00m " (.getName *ns*) "=> "))))

#_
(defn active-monitors []
  (->> (sh-lines "xrandr") 
       (filter #(re-find #" connected" %)) 
       (map #(clojure.string/replace % #" connected.*" ""))))

#_
(defn shx-str [cmd & args]
  (-> (closh.core/shx (str cmd) args)
    (closh.core/process-output)
    (clojure.string/trim)))

