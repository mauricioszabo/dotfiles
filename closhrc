(require '[cljs.nodejs]
	 '[clojure.string :as str])

(def PS1 "\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;34m\\]\\w\\[\\033[00m\\]\\$ ")

(defalias ls "ls --color")
(defalias gits "git status")
(defalias gitc "git commit -v")
(defalias gita "git add")
(defalias gitd "git diff --color")
(defalias gitm "git checkout master && git pull")

(defcmd runatom []
  (let [curr-dir (sh-str pwd)
        home (sh-str echo $HOME)]
    (cd (str home))
    (cd ".atom/packages/clojure-plus")
    (sh atom (str curr-dir))
    (cd curr-dir)))

(defcmd arepl [] 
  runatom
  lein repl)

(defalias be "bundle exec")

(defmulti run-docker* (fn [img] img))
(defmethod run-docker* "rabbit" [_]
  (sh docker run --rm --hostname my-rabbit --name some-rabbit -p "5672:5672" -p "15672:15672" rabbitmq:3-management))

(defmethod run-docker* js/undefined [_]
  (println "Please choose an pre-defined image"))

(defcmd run-docker [image] (run-docker* image))

(defn read-file [file] (sh-str cat (identity file)))

(defn closh-prompt []
  (let [name (str (sh-str whoami) "@" (sh-str hostname))
        path (str/replace-first (sh-str pwd) (getenv "HOME") "~")]
        
    (str "\033[01;32m" name " \033[01;34m" path "\033[00m " (.getName *ns*) "=> ")))

(defn active-monitors []
  (->> (sh-lines "xrandr") 
       (filter #(re-find #" connected" %)) 
       (map #(clojure.string/replace % #" connected.*" ""))))

(defn shx-str [cmd & args]
  (-> (closh.core/shx (str cmd) args)
    (closh.core/process-output)
    (clojure.string/trim)))

